#+TITLE: Wire-Cell Toolkit Singularity Containers

This area holds [[https://www.sylabs.io/][Singularity]] recipes for producing containers which
provide run-time or development environments for Wire-Cell Toolkit in
some different contexts.

When you see:

#+BEGIN_EXAMPLE
  n$ echo "this command runs in native environment"
  c$ echo "this command runs in container environment"
#+END_EXAMPLE

* What do you want to do with Wire-Cell Toolkit?

Each ~Singularity.*~ file builds an image.  Also offered are the
binary results built at some point in the past.

** I wanna run ~wire-cell~

Download this relatively svelte (717 MB) image:
[[https://www.phy.bnl.gov/~bviren/simg/wctdev.simg]]

Run this:

#+BEGIN_EXAMPLE
  n$ singularity exec wctdev.simg /bin/bash --rcfile wctrun.rc
  c$ wire-cell --help
#+END_EXAMPLE

This image provides:

- minimal Ubuntu 18.04 image
- build environment and run time dependencies needed by WCT  as Ubuntu packages
- Jsonnet built from source.
- ROOT binaries from CERN.
- Files from WCT ~data~ and ~cfg~ packages.
- A copy of WCT source from ~master~ at time of image build.
- A built version of above source in ~/usr/local/opt/wct/~.

** I  wanna build the ~wctdev~ image


#+BEGIN_EXAMPLE
  n$ wget https://root.cern.ch/download/root_v6.14.02.Linux-ubuntu18-x86_64-gcc7.3.tar.gz
  n$ sudo singularity build wctdev.simg Singularity.wctdev
#+END_EXAMPLE


Notes/caveats on the build:

- Produces 717 MB image, takes about 300 seconds
- Pre-download the required ROOT binary because the download can be
  really slow at times (and fast at others).  If you must rebuild
  multiple times due to problems it gets annoying really fast to wait.

** I wanna newer WCT than what is included

Use the same image for build and run environment but ignore the
version of WCT provided and build it yourself..

#+BEGIN_EXAMPLE
  n$ git clone --recursive git@github.com:WireCell/wire-cell-build.git wct
  n$ singularity exec wctdev.simg /bin/bash --rcfile wctdev.rc
  c$ cd wct/
  c$ ./wcb configure --prefix=`pwd`/install --with-jsonnet=/usr/local --with-eigen-include=/usr/include/eigen3
  c$ ./wcb -p --notests install
#+END_EXAMPLE

Notes:

 - Your SSH agent authentication may not be visible from inside the container so do any ~git~ actions from your native shell.

 - Unlike running the pre-built ~wire-cell~ do *not* set ~PATH~ variables as above in order to avoid any potential of version shear.

In order to run this build or run the build tests the ~PATH~ variables
need to be set to the configured installation location.

#+BEGIN_EXAMPLE
  c$ export LD_LIBRARY_PATH=`pwd`/install/lib:$LD_LIBRARY_PATH
  c$ export PATH=`pwd`/install/bin:$PATH
  c$ ./wcb -p --alltests
#+END_EXAMPLE

In principle, all tests should pass but there may be one or two edge
cases.  If ~test_units.py~ mails one probably needs to

#+BEGIN_EXAMPLE
  source /usr/local/bin/thisroot.sh
#+END_EXAMPLE

* What do you want to do with WC/LS?

WC/LS = Wire-Cell Toolkit + /art/ and LArSoft.  It has its own image,
binding script and rc helper file.

** I wanna run WC/LS jobs

Download this relatively bloated (4.4 GB) image:
[[https://www.phy.bnl.gov/~bviren/simg/wclsdev.simg]]

#+BEGIN_EXAMPLE
  n$ singularity exec wclsdev.simg /bin/bash --rcfile wclsrun.rc
  c$ wire-cell --help
  c$ art --help
#+END_EXAMPLE

This provides

- minimal Ubuntu 16.04 image with a few extra system packages
- larsoft as UPS binaries include ~larwirecell~
- latest production WCT as the ~wirecell~ UPS product
- a copy of latest WCT source from github
- build of this source against the above as a ~dev~ version of UPS product ~wirecell~

** I wanna build the ~wclsdev~ image

Well, good fscking luck.  There are numerous problems getting it to
work, mostly involving around the insane ~setup~ script needed before
any further UPS failure can happen.  In the end I could only automate
so much of it.

#+BEGIN_EXAMPLE
  n$ sudo singularity build --sandbox wclsdev-sandbox Singularity.wcls.dev
  n$ sudo singularity shell --writable wclsdev-sandbox
  c$ /usr/local/src/wcls.sh
  c$ exit
  n$ sudo singularity build wclsdev.simg wclsdev-sandbox
#+END_EXAMPLE

Notes/caveats:

- Ubuntu 16.04 is used because FNAL does not yet support 18.04 for UPS
  binaries.
- The Singularity build will take FOREVER due to downloading a
  gajillion jigglebytes from FNAL's SciSoft server.

** I wanna build a newer ~wirecell~ UPS product

The container is read-only and writable storage is needed to hold any
UPS products that want to be built.  In principle, you can just use
native file system like above.  However, instead, we bind some native
directory to a well known location to make the helper scripts simpler.

#+BEGIN_EXAMPLE
  n$ git clone --recursive git@github.com:WireCell/wire-cell-build.git wct
  n$ ./bind-wcls.sh wclsdev.simg ups-dev-products wclsdev.rc
  
  c$ wclsdev-ups-declare
  c$ cd wct
  c$ wclsdev-wct-configure
  c$ ./wcb -p --notests install
#+END_EXAMPLE

** Wait, what?

Read [[./wclsdev.rc]].

** I wanna develop WC/LS 

Build a newer ~wirecell~ UPS product like above and then:

#+BEGIN_EXAMPLE
  n$ ./bind-wcls.sh wclsdev.simg wct-ups-dev-install wclsdev.rc 

  c$ wclsdev-init lsdev
  c$ wclsdev-srcs
  c$ wclsdev-fsck-ups
  c$ wclsdev-setup lsdev
  c$ cd build_u16.x86_64/
  c$ mrb build
#+END_EXAMPLE

Subsequent fresh sessions can be set up with:

#+BEGIN_EXAMPLE
  n$ ./bind-wcls.sh wclsdev.simg wct-ups-dev-install wclsdev.rc 

  c$ wclsdev-setup lsdev
#+END_EXAMPLE

** I wanna develop WC/LS and understand what I'm doing

Read [[./wclsdev.rc]].

** The UPS externals are old and stupid, give me freshness

There's no special instructions here, other than to use the bind mount
on ~/usr/local/ups-dev~ in which to install any additional UPS products.

Leading up to WCT 0.8.0 a new version of Jsonnet is needed.  Here is
what was done.  

#+BEGIN_EXAMPLE
  c$ cd $wclsdev_upsdev
  c$ git clone ssh://p-build-framework@cdcvs.fnal.gov/cvs/projects/build-framework-jsonnet-ssi-build jsonnet-ssi-build
  c$ cd jsonnet-ssi-build
  c$ ./bootstrap.sh $wclsdev_upsdev
  c$ cd $wclsdev_upsdev/jsonnet/v0_9_3_c/
  c$ ./build_jsonnet.sh $wclsdev_upsdev e15 prof
  c$ ./Linux64bit+4.4-2.23-e15-prof/bin/jsonnet --version
  Jsonnet commandline interpreter v0.9.3
#+END_EXAMPLE

That just rebuilt the last version.  To update, hack the scripts in the shim package.  If you are lucky you'll just need to tweak the UPS spelling of the version in the variables:

#+BEGIN_EXAMPLE
origpkgver=v0_11_2
pkgver=${origpkgver}
#+END_EXAMPLE

in files ~build_jsonnet.sh~ and ~bootstrap.sh~.  Repeating the two
scripts as above should hopefully succeed.

#+BEGIN_EXAMPLE
  c$ ./Linux64bit+4.4-2.23-e15-prof/bin/jsonnet --version
  Jsonnet commandline interpreter v0.11.2
#+END_EXAMPLE

You must now find mention of the old version in various places, in particular:

#+BEGIN_EXAMPLE
  n$ emacs $wclsdev_upsdev/wirecell/wclsdev/ups/wirecell.table
#+END_EXAMPLE

Strictly speaking you just need to modify the stanza matching the
quals to be used.  If you've already set up your environment for that
version of ~wirecell~ you can cycle:

#+BEGIN_EXAMPLE
  c$ unsetup wirecell
  c$ setup wirecell wclsdev -q e15:prof
  c$ which jsonnet
  c$ /usr/local/ups-dev/jsonnet/v0_11_2/Linux64bit+4.4-2.23-e15-prof/bin/jsonnet
#+END_EXAMPLE

You'll likely now need to rebuild your ~wct~ and then ~lsdev~ areas.

* (More) Caveats for building images

** Native support

Besides ~singularity~ you will need to provide local installations of:

- ~debootstrap~ :: to build Ubuntu images
- ~yum~ :: to build Scientific Linux images

** Disk space

Substantial disk space is required (especially for the SL/UPS images).
If you are short on disk space for ~/tmp~, you may want to do something
like:

#+BEGIN_EXAMPLE
  n$ sudo mkdir -p /srv/singularity/tmp
  n$ sudo chmod 777 /srv/singularity/tmp
  n$ export SINGULARITY_TMPDIR=/srv/singularity/tmp
  n$ export SINGULARITY_LOCALCACHEDIR=/srv/singularity/tmp/$USER
#+END_EXAMPLE


** Problems with FNAL software

The ~wclsdev~ image requires manual intervention because problems
getting the UPS ~setup~ command to work inside Singularity's build.
I can't find out why but it may be due ~/bin/sh~ not being bash.

Downloading from SciSoft takes forever.  There's a hack to pre-seed
the UPS tarballs.  Inquire if interested.

