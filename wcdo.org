#+title: wcdo

Do stuff with Wire-Cell in a Singularity container.

* Getting started

** Installation

Download/copy the following script somewhere in your ~$PATH~ and make sure it is executable.

 - [[https://raw.githubusercontent.com/WireCell/wire-cell-singularity/master/wcdo.sh][wcdo.sh]]

To assist in getting updates you may wish to clone this repository and
symlink ~wcdo.sh~ into a directory in your ~$PATH~.

** Quick start usage

Pick a directory with several GB of space to work in and run a few
~wcdo.sh~ commands run in your native OS (the container host OS):

#+BEGIN_EXAMPLE
  $ mkdir -p ~/wcdo/example
  $ cd ~/wcdo/example
  $ wcdo.sh init
  $ wcdo.sh wct
  $ wcdo.sh get-image sl7 
  $ wcdo.sh make-project myproj sl7
  $ ./wcdo-myproj.sh
#+END_EXAMPLE

With this last command, you are now inside the container environment.
Many bash functions are available and may be discovered with
tab-completion:

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:example> wcdo-TAB
#+END_EXAMPLE

Most have a "~wcdo-*-help~" function that will print some help:

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:example> wcdo-wirecell-path-help

  Set or display the WIRECELL_PATH

  usage: wcdo-wirecell-path [ default <path> <path> ... ]

  With no argument, print the current path.

  A special "<path>" given as the literal string "default" will cause
  the default directories for the container to be used.

  Otherwise a <path> argument is prepended.

  Note: the UPS product "wirecell" destroys the WIRECELL_PATH so this
  function will be useful after any "setup" of "wirecell" UPS product.

#+END_EXAMPLE

* Getting started commands

Each of the ~wcdo.sh~ native OS commands above are now described.
Most importantly, users should read the last section describing the
~make-project~ command and customizing the files it produces.

** ~init~

#+BEGIN_EXAMPLE
  $ wcdo.sh init
#+END_EXAMPLE

This prepares your *current working directory* to follow some conventions.

 - makes some sub-directory stubs
 - initializes an empty UPS products directory
 - downloads a recent copy of [[https://github.com/WireCell/wire-cell-singularity/blob/master/wcdo.rc][wcdo.rc]] for later use

** ~wct~

This command downloads Wire-Cell Toolkit source and data/cfg packages.

#+BEGIN_EXAMPLE
  $ wcdo.sh wct [access branch]
#+END_EXAMPLE

Running this is the same as individually running:

#+BEGIN_EXAMPLE
  $ wcdo.sh wct-data [access branch]
  $ wcdo.sh wct-cfg [access branch]
  $ wcdo.sh wct-source [access branch]
#+END_EXAMPLE

The optional ~[access branch]~ arguments control which GitHub URL is
used and which branch of the packages is checked out.

The ~access~ option is one of:

 - ~anonymous~ :: (default) anonymous (non-authenticated) HTTP Git
                  access to GitHub is used.

 - ~developer~ :: use authenticated access requiring user to supply
                  credentials.

The ~branch~ specifies which point in the code history to retrieve:

 ~ ~master~ :: (default) tip of the master branches are retrieved

 - ~X.Y.x~ :: (the ~.x~ is literal) a release branch is retrieved.

The results of these commands are just normal local ~git~
repositories.  You are free to evolve them as you wish either on in
your native OS or in the container.


** ~get-image~

This downloads a Singularity image based on its name.  By default it
simply downloads the image to the current working directory.  You may
instead supply a local cache directory in order to avoid redownloading
the same image.  A cache directory also results in the image being
symlinked so you can save disk space.  Finally, you can provide some
other URL from which to find images.  Get a little help by running
with no arguments:

#+BEGIN_EXAMPLE
  $ ./wcdo.sh get-image 
  usage: wcdo get-image <name> [dir [url]]
          <name>	an Singularity image name
          <dir>	a local directory to find images
          <url>	base URL to find images
#+END_EXAMPLE

** ~make-project~

This command generates files in the current working directory.  Some
of these files *should* be modified by the user and some should *not*.
Scripts (ending in ~.sh~) contain code that executes inside your
native OS.  RC files (~.rc~) contain code that executes inside the
container.

These generated files should *not* be modified manually:

- ~wcdo.rc~ :: a downloaded file holding many helpful bash functions.
- ~wcdo-<name>.rc~ :: a generated RC file which defines shell environment for the project.  
- ~wcdo-<name>.sh~ :: a generated script which is used to enter the project of the given name.  

These files are either generated or may be created by the user.  The
user *should* modify them.  They will not be overwritten by ~wcdo~.

- ~wcdo-local.sh~ :: Any shell code written here will be run by any ~wcdo-<name>.sh~ script.
- ~wcdo-local-<name>.sh~ :: Any shell code written here will be only by the matching ~wcdo-<name>.sh~ script.

- ~wcdo-local.rc~ :: Any shell code written here will be run in the container for any project.
- ~wcdo-local-<name>.rc~ :: Any shell code written here will be run in the container for only the matching project.

* Projects

As already introduced, using the container is organized around the
concept of a "project".  The idea is to bundle all the information for
a particular task so that you may easily return to it days or weeks
later after all the annoying details have long left your mind.

A ~wcdo~ project is defined by the working directory and the set of
~wcdo-*.{rc,sh}~ scripts as described above.

In principle, one may produce multiple sets of the ~wcdo-*.{rc,sh}~
files in the same working directory.  However, it is possible (even
easy) to produce conflicting configurations which can not share the
same ~/wcdo~ working directory.  For example, there is a single
MRB-controlled development area mounted under ~/wcdo/src/mrb~ which
can not support multiple sets of source packages that different ~wcdo~
projects may want.

To assure no conflicts, it is recommended to maintain only one ~wcdo~
working directory per project.  The amount of extra storage required
to maintain this separation is minimal assuming ~/cvmfs~ or a local
UPS "products" area is shared between the projects.

** Customizing native side

You may wish to modify how you start Singularity by editing the
~wcdo-local.sh~ to control all projects or just ~wcdo-local-<name>.sh~
to control one project.  For example, if the command ~singularity~ is
installed in some unusual location you may want to add this to ~PATH~

#+BEGIN_EXAMPLE
  $ cat wcdo-local.sh 
  PATH=$HOME/opt/singularity/bin:$PATH
#+END_EXAMPLE

** Customizing container side

You may wish to modify or augment the environment provided already by
~wcdo.rc~ and ~wcdo-<name>.rc~.  Making a project creates a skeleton
of ~wcdo-local-<name>.rc~ which names several variable which help to
reduce how many things you have to remember.  You may also want to
call a few commands each time you enter the project's container.  

For example, here is a modified version of a generated
~wcdo-local-<name>.rc~ stub which I use for testing Clang-based
builds:

#+BEGIN_EXAMPLE
  $ cat wcdo-local-cldev.rc
  #!/bin/bash

  # This is a local wcdo rc file for project cldev.
  # It was initally generated but is recomended for customizing by you, dear user.
  # It is included at the end of the main RC files.
    
  # These are optional but required if wcdo-mrb-* commands are to be used.
  wcdo_mrb_project_name="larsoft"
  wcdo_mrb_project_version="v07_07_00"
  wcdo_mrb_project_quals="c2:prof"

  # Additional variables may be usefully set since this file was
  # first generated.  

  # It is perhaps useful to end this with some command to be called 
  # on each entry to the contaner.
  # The wcdo-* functions try to be idempotent.
  source /cvmfs/larsoft.opensciencegrid.org/products/setup
  path-prepend $wcdo_ups_products PRODUCTS
  wcdo-mrb-init
  wcdo-mrb-add-source larwirecell bviren_v070200 v07_02_00
#+END_EXAMPLE

I have another almost identical "project" which is for testing
GCC-based builds.  The only difference besides the "project" name is
the ~wcdo_mrb_project_quals~ setting.

More examples of configuration are given below.

* In-container environment

The directory structure is opinionated in order to reduce
options/complexity.  All user-accessible files are mounted at:

#+BEGIN_EXAMPLE
  /wcdo
#+END_EXAMPLE

This is the same directory as used ~wcdo.sh init~ etc in the section
[[Getting started]].  The user's home directory is also typically mounted
by Singularity and additional directories may be mounted by modifying
the native-side ~.sh~ files.

As mentioned above, the environment is populated with various ~wcdo-*~
functions to try to make life with UPS/mrb easier.  TAB-completion
will show a list.  Running a function ending in ~-help~ will provide
some guidance for using its associated function.  You can also dump
their function bodies to see exactly what they do with the usual Bash
~type~ command:

#+BEGIN_EXAMPLE
  $ type wcdo-mrb-goto 
  wcdo-mrb-goto is a function
  wcdo-mrb-goto () 
  { 
      if [ -z "$MRB_TOP" ]; then
          wcdo-mrb-init;
      fi;
      goto $MRB_TOP
  }
#+END_EXAMPLE

Any global environment variables are named ~wcdo_*~ and are kept to a
minimum and are meant to hold some static "wcdo project" information
as typically set inside the native-side ~.sh~ files.

* Extended example of use

** Building WCT source

Using the GCC setup in ~wcdo-local-gccdev.rc~ and with comments stripped:

#+BEGIN_EXAMPLE
wcdo_mrb_project_name="larsoft"
wcdo_mrb_project_version="v07_07_00"
wcdo_mrb_project_quals="e17:prof"
wcdo-ups-init
path-append $wcdo_ups_products PRODUCTS
#+END_EXAMPLE

Enter the container:

#+BEGIN_EXAMPLE
  $ ./wcdo-gccdev.sh 
#+END_EXAMPLE

To start clean I remove any previous UPS products named "wirecell"
that I might have made prior:

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:example> rm -rf /wcdo/lib/ups/wirecell
  [sl7]bviren@hierocles:example> setup wirecell v0_9_1a -q e17:prof
  [sl7]bviren@hierocles:example> wcdo-ups-declare wirecell DEVEL
  [sl7]bviren@hierocles:example> setup wirecell DEVEL -q e17:prof
#+END_EXAMPLE

At this point, take note that UPS does *not* setup up the environment
properly.  In particular, ~LD_LIBRARY_PATH~ has no entry.  But, one
can go on to configure, build and install:

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:example> wcdo-ups-wct-configure-source
  [sl7]bviren@hierocles:wct> ./wcb -p --notests install
#+END_EXAMPLE

At this point the ~lib~ directory exists and one must re-~setup~ the
~wirecell~ UPS "product" in order to unbreak the UPS environment.  You
also *must* reset the ~WIRECELL_PATH~ because the UPS "product" breaks
it.  UPS actively hates its users.

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:wct> echo $LD_LIBRARY_PATH |tr ':' '\n'|grep wirecell
  [sl7]bviren@hierocles:wct> setup wirecell DEVEL -q e17:prof
  [sl7]bviren@hierocles:wct> echo $LD_LIBRARY_PATH |tr ':' '\n'|grep wirecell
  /wcdo/lib/ups/wirecell/DEVEL/Linux64bit+4.4-2.17-sl7-5-e17-prof/lib64

  [sl7]bviren@hierocles:wct> wcdo-wirecell-path default

  [sl7]bviren@hierocles:wct> ./wcb -p --alltests
  ...
    tests that fail 0/109 
#+END_EXAMPLE


** Same as above but with Clang

My ~wcdo-local-cldev.rc~

#+BEGIN_EXAMPLE
  wcdo_mrb_project_name="larsoft"
  wcdo_mrb_project_version="v07_07_00"
  wcdo_mrb_project_quals="c2:prof"
  wcdo-ups-init
  path-append $wcdo_ups_products PRODUCTS
#+END_EXAMPLE

And, similar dance as before

#+BEGIN_EXAMPLE
  [sl7]bviren@hierocles:example> setup wirecell v0_9_1a -q c2:prof
  [sl7]bviren@hierocles:example> wcdo-ups-declare wirecell DEVEL
  [sl7]bviren@hierocles:example> setup wirecell DEVEL -q c2:prof
  [sl7]bviren@hierocles:example> wcdo-ups-wct-configure-source
  [sl7]bviren@hierocles:wct> ./wcb -p --notests install
  [sl7]bviren@hierocles:wct> setup wirecell DEVEL -q c2:prof
  [sl7]bviren@hierocles:wct> wcdo-wirecell-path default
  [sl7]bviren@hierocles:wct> ./wcb -p --alltests
    tests that fail 1/109 
      /wcdo/src/wct/build/apps/test_dlopen 
#+END_EXAMPLE

That failure seems to be a real bug or clang "feature"....




